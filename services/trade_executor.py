"""Wrapper around BotLauncher for agent use."""

from __future__ import annotations

from typing import Dict, Any

from api.crypto_api import CryptoAPI

from services.bot_launcher import BotLauncher


class TradeExecutorService:
    """Provide start/stop hooks for trading bots."""

    def __init__(self, config: Dict):
        self.config = config
        self.launcher = BotLauncher(config)
        api_keys = config.get("api_keys", {})
        self.crypto_api = CryptoAPI(
            api_key=api_keys.get("binance", ""),
            secret_key=api_keys.get("binance_secret", ""),
            simulation_mode=config.get("simulation_mode", True),
            portfolio=self.launcher.sim_portfolio,
            config=config,
        )

    def start(self):
        self.launcher.start_all_bots()

    async def execute_order(self, order: Dict[str, Any]):
        """Place an order generated by the AI system."""
        market = order.get("market", "crypto")
        if market != "crypto":
            # future expansion for stocks/forex
            return
        await self.crypto_api.place_order(
            symbol=order.get("symbol"),
            side=order.get("side"),
            qty=order.get("qty"),
            price=order.get("price"),
            confidence=order.get("confidence"),
        )

    # TODO: expand with pause/stop logic

